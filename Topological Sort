
class TopologicalSorting{

   static class Graph
   {
      int vertices;
      ArrayList<Integer> adj[] ;
      
      
       Graph(int v)
       {
           vertices = v ;
           adj  = new ArrayList[v] ;
           for ( int i = 0 ; i < v;i++)
           {
              adj[i] = new ArrayList<Integer>() ;
           }
           
       }
       
       public void addEdge(int u , int v)
       {
          adj[u].add(v) ;
       }
       
       
          public void topologicalSortUtil( int vertex ,Stack<Integer>  st , boolean[] visited)
       {
           visited[vertex] = true ;
           
           for ( Integer node : adj[vertex] )
           {
                if ( !visited[node] )
                {
                   topologicalSortUtil( node,st,visited);
                }
           
           }
           
           
           st.push(vertex) ;
       
       
       }
       
       public void topologicalSort()
       {
           Stack<Integer> st = new Stack<Integer>() ;
           boolean[] visited = new boolean[vertices] ;
           
           for ( int i = 0 ; i < vertices;i++)
           {
                if ( !visited[i] )
                {
                   topologicalSortUtil(  i,st,visited);
                
                }
           
           }
           
           while ( !st.isEmpty() )
           {
               System.out.println(st.pop()) ;
           
           }
       
       
       }
       
       
       
   }


    public static void main(String[] args)
    {
        Graph g = new Graph(4);
        g.addEdge(1,0);
        g.addEdge(2,3);
        g.topologicalSort() ;
        
    
    }
    





}
